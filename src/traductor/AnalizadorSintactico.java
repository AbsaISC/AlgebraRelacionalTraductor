
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jun 12 15:48:59 CDT 2014
//----------------------------------------------------

package traductor;

import java_cup.runtime.*;
import java.io.FileReader;
import java.util.Stack;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jun 12 15:48:59 CDT 2014
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\040\000\002\007\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\005\000\002\002\005\000\002\002\010" +
    "\000\002\002\010\000\002\002\010\000\002\002\010\000" +
    "\002\002\010\000\002\002\012\000\002\002\005\000\002" +
    "\003\003\000\002\003\005\000\002\003\005\000\002\004" +
    "\005\000\002\004\003\000\002\005\003\000\002\005\005" +
    "\000\002\005\005\000\002\005\004\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\003\000\002\006\003\000\002\006\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\123\000\014\004\007\005\012\012\004\015\010\033" +
    "\011\001\002\000\004\015\112\001\002\000\004\002\111" +
    "\001\002\000\014\002\001\006\054\007\056\010\052\011" +
    "\055\001\002\000\004\015\104\001\002\000\014\004\007" +
    "\005\012\012\004\015\010\033\011\001\002\000\022\002" +
    "\uffff\006\uffff\007\uffff\010\uffff\011\uffff\013\uffff\015\uffff" +
    "\016\uffff\001\002\000\004\015\013\001\002\000\014\015" +
    "\021\021\015\031\016\032\022\034\014\001\002\000\030" +
    "\013\uffe3\016\uffe3\017\uffe3\020\uffe3\022\uffe3\023\uffe3\024" +
    "\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\001\002\000\012" +
    "\015\021\031\016\032\022\034\014\001\002\000\032\013" +
    "\ufff1\014\077\016\ufff1\017\ufff1\020\ufff1\022\ufff1\023\ufff1" +
    "\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\001\002\000" +
    "\010\013\044\017\045\020\046\001\002\000\030\013\uffe2" +
    "\016\uffe2\017\uffe2\020\uffe2\022\uffe2\023\uffe2\024\uffe2\025" +
    "\uffe2\026\uffe2\027\uffe2\030\uffe2\001\002\000\012\015\021" +
    "\031\016\032\022\034\014\001\002\000\030\013\uffe4\016" +
    "\uffe4\017\uffe4\020\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4" +
    "\026\uffe4\027\uffe4\030\uffe4\001\002\000\030\013\ufff0\016" +
    "\ufff0\017\ufff0\020\ufff0\022\031\023\025\024\030\025\024" +
    "\026\026\027\027\030\032\001\002\000\012\015\021\031" +
    "\016\032\022\034\014\001\002\000\012\015\021\031\016" +
    "\032\022\034\014\001\002\000\012\015\021\031\016\032" +
    "\022\034\014\001\002\000\012\015\021\031\016\032\022" +
    "\034\014\001\002\000\012\015\021\031\016\032\022\034" +
    "\014\001\002\000\012\015\021\031\016\032\022\034\014" +
    "\001\002\000\004\032\033\001\002\000\030\013\uffe5\016" +
    "\uffe5\017\uffe5\020\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5" +
    "\026\uffe5\027\uffe5\030\uffe5\001\002\000\030\013\uffeb\016" +
    "\uffeb\017\uffeb\020\uffeb\022\031\023\025\024\030\025\024" +
    "\026\026\027\027\030\032\001\002\000\030\013\uffe9\016" +
    "\uffe9\017\uffe9\020\uffe9\022\031\023\025\024\030\025\024" +
    "\026\026\027\027\030\032\001\002\000\030\013\uffe6\016" +
    "\uffe6\017\uffe6\020\uffe6\022\031\023\025\024\030\025\024" +
    "\026\026\027\027\030\032\001\002\000\030\013\uffe7\016" +
    "\uffe7\017\uffe7\020\uffe7\022\031\023\025\024\030\025\024" +
    "\026\026\027\027\030\032\001\002\000\030\013\uffea\016" +
    "\uffea\017\uffea\020\uffea\022\031\023\025\024\030\025\024" +
    "\026\026\027\027\030\032\001\002\000\030\013\uffe8\016" +
    "\uffe8\017\uffe8\020\uffe8\022\031\023\025\024\030\025\024" +
    "\026\026\027\027\030\032\001\002\000\022\016\043\022" +
    "\031\023\025\024\030\025\024\026\026\027\027\030\032" +
    "\001\002\000\030\013\uffec\016\uffec\017\uffec\020\uffec\022" +
    "\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec" +
    "\001\002\000\014\004\007\005\012\012\004\015\010\033" +
    "\011\001\002\000\014\015\021\021\015\031\016\032\022" +
    "\034\014\001\002\000\014\015\021\021\015\031\016\032" +
    "\022\034\014\001\002\000\012\013\uffef\016\uffef\017\045" +
    "\020\046\001\002\000\012\013\uffee\016\uffee\017\045\020" +
    "\uffee\001\002\000\014\006\054\007\056\010\052\011\055" +
    "\016\053\001\002\000\014\004\007\005\012\012\004\015" +
    "\010\033\011\001\002\000\022\002\ufffc\006\ufffc\007\ufffc" +
    "\010\ufffc\011\ufffc\013\ufffc\015\ufffc\016\ufffc\001\002\000" +
    "\014\004\007\005\012\012\004\015\010\033\011\001\002" +
    "\000\014\004\007\005\012\012\004\015\010\033\011\001" +
    "\002\000\014\004\007\005\012\012\004\015\010\033\011" +
    "\001\002\000\022\002\ufffd\006\ufffd\007\ufffd\010\ufffd\011" +
    "\ufffd\013\ufffd\015\ufffd\016\ufffd\001\002\000\014\006\054" +
    "\007\056\010\052\011\055\015\061\001\002\000\014\015" +
    "\021\021\015\031\016\032\022\034\014\001\002\000\010" +
    "\016\063\017\045\020\046\001\002\000\022\002\ufff9\006" +
    "\ufff9\007\ufff9\010\ufff9\011\ufff9\013\ufff9\015\ufff9\016\ufff9" +
    "\001\002\000\014\006\054\007\056\010\052\011\055\015" +
    "\065\001\002\000\006\015\067\031\016\001\002\000\006" +
    "\013\ufff5\016\ufff5\001\002\000\006\015\067\031\016\001" +
    "\002\000\006\013\071\016\072\001\002\000\004\031\016" +
    "\001\002\000\022\002\ufffa\006\ufffa\007\ufffa\010\ufffa\011" +
    "\ufffa\013\ufffa\015\ufffa\016\ufffa\001\002\000\006\013\ufff3" +
    "\016\ufff3\001\002\000\006\013\071\016\075\001\002\000" +
    "\006\013\ufff4\016\ufff4\001\002\000\022\002\ufffe\006\ufffe" +
    "\007\ufffe\010\ufffe\011\ufffe\013\ufffe\015\ufffe\016\ufffe\001" +
    "\002\000\004\031\100\001\002\000\030\013\ufff2\016\ufff2" +
    "\017\ufff2\020\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026" +
    "\ufff2\027\ufff2\030\ufff2\001\002\000\030\013\uffed\016\uffed" +
    "\017\uffed\020\uffed\022\031\023\025\024\030\025\024\026" +
    "\026\027\027\030\032\001\002\000\014\006\054\007\056" +
    "\010\052\011\055\016\103\001\002\000\022\002\ufff6\006" +
    "\ufff6\007\ufff6\010\ufff6\011\ufff6\013\ufff6\015\ufff6\016\ufff6" +
    "\001\002\000\006\015\067\031\016\001\002\000\004\013" +
    "\106\001\002\000\016\004\007\005\012\012\004\015\010" +
    "\031\016\033\011\001\002\000\014\006\054\007\056\010" +
    "\052\011\055\016\110\001\002\000\022\002\ufffb\006\ufffb" +
    "\007\ufffb\010\ufffb\011\ufffb\013\ufffb\015\ufffb\016\ufffb\001" +
    "\002\000\004\002\000\001\002\000\024\004\007\005\012" +
    "\012\004\015\114\021\015\031\016\032\022\033\011\034" +
    "\014\001\002\000\014\006\054\007\056\010\052\011\055" +
    "\013\123\001\002\000\022\004\007\005\012\012\004\015" +
    "\114\031\016\032\022\033\011\034\014\001\002\000\010" +
    "\013\116\017\045\020\046\001\002\000\014\004\007\005" +
    "\012\012\004\015\010\033\011\001\002\000\014\006\054" +
    "\007\056\010\052\011\055\013\120\001\002\000\014\004" +
    "\007\005\012\012\004\015\010\033\011\001\002\000\014" +
    "\006\054\007\056\010\052\011\055\016\122\001\002\000" +
    "\022\002\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\013\ufff7" +
    "\015\ufff7\016\ufff7\001\002\000\014\004\007\005\012\012" +
    "\004\015\010\033\011\001\002\000\014\006\054\007\056" +
    "\010\052\011\055\016\125\001\002\000\022\002\ufff8\006" +
    "\ufff8\007\ufff8\010\ufff8\011\ufff8\013\ufff8\015\ufff8\016\ufff8" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\123\000\006\002\005\007\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\002\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\017\005\016\006\022\001\001\000\002" +
    "\001\001\000\006\004\017\006\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\017" +
    "\006\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\017\006\040\001\001\000\006\004\017\006\037" +
    "\001\001\000\006\004\017\006\036\001\001\000\006\004" +
    "\017\006\035\001\001\000\006\004\017\006\034\001\001" +
    "\000\006\004\017\006\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\002\050" +
    "\001\001\000\010\004\017\005\047\006\022\001\001\000" +
    "\010\004\017\005\046\006\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\002\075\001" +
    "\001\000\002\001\001\000\004\002\063\001\001\000\004" +
    "\002\057\001\001\000\004\002\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\017\005\061\006\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\067\004\065\001\001\000\002\001\001" +
    "\000\006\003\073\004\065\001\001\000\002\001\001\000" +
    "\004\004\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\104\004\065\001" +
    "\001\000\002\001\001\000\006\002\106\004\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\002\112\004\017\005\114\006\022\001\001\000\002" +
    "\001\001\000\010\002\101\004\017\006\041\001\001\000" +
    "\002\001\001\000\004\002\116\001\001\000\002\001\001" +
    "\000\004\002\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\002\123\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public String getResultado(){
		return action_obj.query;
	}

	public void report_error(String error,Object info){
		String m=new String("Error");
		if (info instanceof java_cup.runtime.Symbol){
			java_cup.runtime.Symbol s=((java_cup.runtime.Symbol) info);
			if(s.left >= 0){
				m+=(" in line "+(s.left+1));
				if(s.right >= 0)
					m+=(", column "+(s.right+1));
			}
		}
		m+=(" : "+error);
		System.out.println(m);
		//throw new Error(m);
	}

	public void report_fatal_error(String error, Object info){
	
		report_error(error,info);
		
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {


	Stack<String> stackReg=new Stack<String>();
	Stack<String> stackCamp=new Stack<String>();
	Stack<String> stackCond=new Stack<String>();
	String query="";
	int num=0;
	public void imprimeP(){
		for (String sta: stackReg) {
            System.out.println(sta);
        }
        System.out.println("");
        System.out.println("************");
        System.out.println("");
	}
	public void finreg(){
		if(stackReg.isEmpty()){
			throw new Error("Error en la pila al final de la regla");
		}
		imprimeP();
		System.out.println("\n\n\n");
		query=stackReg.pop();
	}
	public boolean esOtraConsulta(String objeto){
		String[] sep=objeto.split(" ");
		for(int i=0;i<sep.length;i++)
			if(sep[i].equals("SELECT"))
				return true;
		return false;
	}

	public void seleccion(String cond){
		String reglaAnt;
		String reglaAct;
		if(stackReg.isEmpty()){
			throw new Error("Pila vacia para llevar acabo la selección");
		}
		reglaAnt=stackReg.pop();
		if(esOtraConsulta(reglaAnt)){
			reglaAnt="("+reglaAnt+") AS A"+num;
			num++;
		}
		reglaAct="SELECT * FROM "+reglaAnt+" WHERE "+cond;
		stackReg.push(reglaAct);
		imprimeP();
	}

	public void proyeccion(String campos){
		String reglaAnt;
		String reglaAct;
		if(stackReg.isEmpty()){
			throw new Error("Pila vacia para llevar acabo la proyección");
		}
		reglaAnt=stackReg.pop();
		if(esOtraConsulta(reglaAnt)){
			reglaAnt="("+reglaAnt+") AS A"+num;
			num++;
		}
		reglaAct="SELECT "+campos+" FROM "+reglaAnt;
		stackReg.push(reglaAct);
		imprimeP();
	}

	public void cruz(){
		String elem1,elem2;
		String reglaAct;
		if(stackReg.isEmpty()){
			throw new Error("Pila vacia para llevar acabo el producto cruz");
		}
		elem2=stackReg.pop();
		elem1=stackReg.pop();

		if(esOtraConsulta(elem1)){
			elem1="("+elem1+") AS A"+num;
			num++;
		}
		if(esOtraConsulta(elem2)){
			elem2="("+elem2+") AS B"+num;
			num++;
		}
			reglaAct="SELECT * FROM "+elem1+","+elem2+"";
		stackReg.push(reglaAct);

		imprimeP();
	}

	public void union(){
		String elem1,elem2;
		String reglaAct;
		if(stackReg.isEmpty()){
			throw new Error("Pila vacia para llevar acabo la union");
		}
		elem2=stackReg.pop();
		elem1=stackReg.pop();
		reglaAct=elem1+" UNION "+elem2;
		stackReg.push(reglaAct);

		imprimeP();
	}

	

	public void interseccion(String campos){
		String elem1,elem2;
		String reglaAct;
		if(stackReg.isEmpty()){
			throw new Error("Pila vacia para llevar acabo la intersección");
		}
		elem2=stackReg.pop();
		elem1=stackReg.pop();
		/*
		if(esOtraConsulta(elem1)){
			elem1="("+elem1+") AS A"+num;
			num++;
		}
		if(esOtraConsulta(elem2)){
			elem2="("+elem2+") AS B"+num;
			num++;
		}
		*/
		reglaAct="SELECT * FROM "+elem1+" INNER JOIN "+elem2+" USING ( "+campos+" )";
		stackReg.push(reglaAct);

		imprimeP();
	}

	public void diferencia(String condiciones){
		String elem1,elem2;
		String reglaAct;
		if(stackReg.isEmpty()){
			throw new Error("Pila vacia para llevar acabo la diferencia");
		}
		elem2=stackReg.pop();
		elem1=stackReg.pop();

		if(esOtraConsulta(elem1)){
			elem1="("+elem1+") AS A"+num;
			num++;
		}
		if(esOtraConsulta(elem2)){
			elem2="("+elem2+") AS B"+num;
			num++;
		}
		reglaAct="SELECT * FROM "+elem1+" LEFT OUTER JOIN "+elem2+" ON "+condiciones/*+" WHERE B"+(num-1)+"."*/;
		stackReg.push(reglaAct);

		imprimeP();
	}

	public void join(){
		String elem1,elem2;
		String reglaAct;
		if(stackReg.isEmpty()){
			throw new Error("Pila vacia para llevar acabo JOIN");
		}
		elem2=stackReg.pop();
		elem1=stackReg.pop();

		if(esOtraConsulta(elem1)){
			elem1="("+elem1+") AS A"+num;
			num++;
		}
		if(esOtraConsulta(elem2)){
			elem2="("+elem2+") AS B"+num;
			num++;
		}
		reglaAct="SELECT * FROM "+elem1+" NATURAL JOIN "+elem2;
		stackReg.push(reglaAct);

		imprimeP();
	}

	public void join(String condicion){
		String elem1,elem2;
		String reglaAct;
		if(stackReg.isEmpty()){
			throw new Error("Pila vacia para llevar acabo JOIN");
		}
		elem2=stackReg.pop();
		elem1=stackReg.pop();

		if(esOtraConsulta(elem1)){
			elem1="("+elem1+") AS A"+num;
			num++;
		}
		if(esOtraConsulta(elem2)){
			elem2="("+elem2+") AS B"+num;
			num++;
		}

		reglaAct="SELECT * FROM "+elem1+" NATURAL JOIN "+elem2+" WHERE "+condicion;
		stackReg.push(reglaAct);
		imprimeP();
	}
	

  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Expresion ::= Campo 
            {
              String RESULT =null;
		int campleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int campright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String camp = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=camp;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expresion",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Expresion ::= NUMERO 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=num.toString();
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expresion",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Expresion ::= CADENA 
            {
              String RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=cad;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expresion",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Expresion ::= Expresion COMO CADENA 
            {
              String RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=exp1+" LIKE "+cad;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expresion",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Expresion ::= Expresion DIFERENTE Expresion 
            {
              String RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=exp1+" <> "+exp2;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expresion",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Expresion ::= Expresion IGUAL Expresion 
            {
              String RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=exp1+" = "+exp2;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expresion",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Expresion ::= Expresion MENORIGUAL Expresion 
            {
              String RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=exp1+" <= "+exp2;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expresion",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Expresion ::= Expresion MENOR Expresion 
            {
              String RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=exp1+" < "+exp2;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expresion",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Expresion ::= Expresion MAYORIGUAL Expresion 
            {
              String RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=exp1+" >= "+exp2;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expresion",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Expresion ::= Expresion MAYOR Expresion 
            {
              String RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=exp1+" > "+exp2;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expresion",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Expresion ::= PAR_I Expresion PAR_D 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT=exp;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Expresion",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Condicion ::= NOT Expresion 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT= "NOT "+exp; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Condicion",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Condicion ::= Condicion AND Condicion 
            {
              String RESULT =null;
		int cond1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int cond1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		String cond1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int cond2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cond2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String cond2 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT= cond1+" AND "+cond2; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Condicion",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Condicion ::= Condicion OR Condicion 
            {
              String RESULT =null;
		int cond1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int cond1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		String cond1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int cond2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cond2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String cond2 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT= cond1+" OR "+cond2; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Condicion",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Condicion ::= Expresion 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=exp;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Condicion",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Campo ::= IDENTIFICADOR 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=id;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Campo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Campo ::= IDENTIFICADOR PUNTO IDENTIFICADOR 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=id1+"."+id2;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Campo",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ListaCampos ::= ListaCampos COMA Campo 
            {
              String RESULT =null;
		int lcampleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int lcampright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		String lcamp = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int campleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int campright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String camp = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=lcamp+","+camp; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ListaCampos",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ListaCampos ::= PAR_I ListaCampos PAR_D 
            {
              String RESULT =null;
		int lcampleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int lcampright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String lcamp = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = lcamp; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ListaCampos",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ListaCampos ::= Campo 
            {
              String RESULT =null;
		int campleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int campright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String camp = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=camp; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ListaCampos",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // R ::= PAR_I R PAR_D 
            {
              String RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("R",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // R ::= JOIN PAR_I Condicion COMA R COMA R PAR_D 
            {
              String RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		String cond = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		join(cond); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("R",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // R ::= JOIN PAR_I R COMA R PAR_D 
            {
              String RESULT =null;
		join(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("R",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // R ::= R DIFERENCIA R PAR_I Condicion PAR_D 
            {
              String RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String cond = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		diferencia(cond);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("R",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // R ::= R INTERCECTION R PAR_I ListaCampos PAR_D 
            {
              String RESULT =null;
		int lcampleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int lcampright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String lcamp = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		interseccion(lcamp);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("R",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // R ::= PROY PAR_I ListaCampos COMA R PAR_D 
            {
              String RESULT =null;
		int lcampleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int lcampright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		String lcamp = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		 proyeccion(lcamp);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("R",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // R ::= SELECT PAR_I Condicion COMA R PAR_D 
            {
              String RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		String cond = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		seleccion(cond);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("R",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // R ::= R UNION R 
            {
              String RESULT =null;
		union();
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("R",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // R ::= R CRUZ R 
            {
              String RESULT =null;
		cruz();
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("R",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // R ::= TABLA 
            {
              String RESULT =null;
		int tableft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tabright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String tab = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		stackReg.push(tab.substring(2));
	imprimeP();
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("R",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Final EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Final ::= R 
            {
              String RESULT =null;
		finreg();
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Final",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

